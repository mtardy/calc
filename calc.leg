%{

/* compile:	leg -o calc.c calc.leg
 *		cc -o calc calc.c
 *
 * run:		( echo a=2*3; echo b=3+4; echo c=a*b ) | ./calc
 */

#define SYMBOL_PAYLOAD			\
    oop     value;				\
    int     defined

#define SYMBOL_INITIALISE(S)	\
    S.value = null;				\
    S.defined = false

#include "object.c"

// this is the global scope
oop globals;

// this should stay out of object.c because it manipulates Symbol members defined in this file

oop update_symbol_value(oop symbol, oop integer)
{
    set(symbol, Symbol, value, integer);
    return symbol;
}

oop apply(oop function, oop parameters)
{
    return get(function, Function, primitive)(parameters);
}

#define YYSTYPE oop

YYSTYPE yylval;

%}

start   = - e:exp               { yylval = e }

exp     =   l:IDENT                             EQUAL p:exp	{ $$ = update_symbol_value(l, p) }
            |   l:postfix DOT   i:IDENT         EQUAL p:exp	{ $$ = map_set(l, i, p) }
            |   l:postfix LBRAC i:exp   RBRAC   EQUAL p:exp	{ $$ = map_set(l, i, p) }
            |   s:sum                                       { $$ = s }

sum     =   l:prod
            ( PLUS+ r:prod          { get(l, Integer, value) += get(r, Integer, value) }
            | MINUS r:prod          { get(l, Integer, value) -= get(r, Integer, value) }
            )*                      { $$ = l }

prod    =   l:prefix
            ( MULTI     r:prefix        { get(l, Integer, value) *= get(r, Integer, value) }
            | DIVIDE    r:prefix        { get(l, Integer, value) /= get(r, Integer, value) }
            | MODULO    r:prefix        { get(l, Integer, value) %= get(r, Integer, value) }
            )*                          { $$ = l }

prefix  =   MINUS n:prefix              { set(n, Integer, value, -get(n, Integer, value));  $$ = n }
        |   PLUS  n:prefix              { $$ = n }
        |         n:postfix             { $$ = n }

postfix =   i:value ( DOT    s:IDENT        p:parameterList     { map_set(p, intern(globals, "this"), i);  i = apply(map_get(i, s), p) }
                    | DOT    s:IDENT        !EQUAL              { i = map_get(i, s) }
                    | LBRAC  p:exp   RBRAC  !EQUAL              { i = map_get(i, p) }
                    | p:parameterList                           { i = apply(i, p) }
                    ) *                                         { $$ = i }

parameterList = LPAREN  m:makeMap
                ( e:exp             { map_append(m, e) }
                ( COMMA e:exp       { map_append(m, e) }
                ) *
                ) ?
                RPAREN              { $$ = m }

value   =   n:NUMBER                { $$ = n }
        |   s:string                { $$ = s }
        |   s:symbol                { $$ = s }
        |   m:map                   { $$ = m }
        |   NULL                    { $$ = null }
        |   i:IDENT                 { $$ = get(i, Symbol, value) }
        |   LPAREN i:exp RPAREN     { $$ = i }

string  =   SQUOTE < (!SQUOTE .)* > SQUOTE      { $$ = makeString(yytext) }
        |   DQUOTE < (!DQUOTE .)* > DQUOTE      { $$ = makeString(yytext) }

symbol  =   HASH    ( i:IDENT                   { $$ = i }
                    | i:string                  { $$ = intern(globals, get(i, String, value)) }
                    )

map     =   LCB   m:makeMap
            (           k:IDENT COLON v:exp     { map_set(m, k, v) }
            (     COMMA k:IDENT COLON v:exp     { map_set(m, k, v) }
            ) *
            ) ?
            RCB                                 { $$ = m }

makeMap =   { $$ = makeMap() }

-       =   [ \t\n\r]*
        | "//"  ( ![\n\r] . )*

IDENT	=	< [a-zA-Z][a-zA-Z0-9_]* >   -   { $$ = intern(globals, yytext) }
NUMBER	=	< [0-9]+ >	-                   { $$ = makeInteger(atoi(yytext)) }
HASH	=	'#'			-
PLUS	=	'+'			-
MINUS	=	'-'			-
MULTI	=	'*'			-
DIVIDE	=	'/'			-
MODULO	=	'%'			-
EQUAL	=	'='			-
NULL	=	'null'		-
COLON	=	':'			-
COMMA	=	','			-
DOT		=	'.'			-
LCB		=	'{'			-
RCB		=	'}'			-
LBRAC	=	'['			-
RBRAC	=	']'			-
LPAREN	=	'('			-
RPAREN	=	')'			-
DQUOTE	=	'"'			-
SQUOTE	=	"'"			-

%%
;

oop prim_exit(oop params)
{
    printf("bye bye with params ");
    println(params);
    exit(0);
}

int main(int argc, char **argv)
{
    globals = makeMap();

    set(intern(globals, "exit"), Symbol, value, makeFunction(prim_exit)); // map_set(globals, intern("exit"), makeFunction(prim_exit));

    while (yyparse()) {
        println(yylval);
    }

    return 0;

    (void)yyAccept;
}
