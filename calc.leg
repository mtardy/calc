%{

/* compile: leg -o calc.c calc.leg
 *			cc -o calc calc.c
 *
 * run:		echo "2+3" | ./calc
 */

#define YYSTYPE int
YYSTYPE yylval = 0;
int var[26];

%}

start	=	e:exp					{ yylval = e }

exp		=	- (a:assign				{ $$ = a }
			| s:sum 				{ $$ = s }
			)

assign	=	l:LETTER EQUAL n:sum	{ $$ = var[l - 'a'] = n }

sum		=	PLUS* l:prod
			( PLUS+ r:prod			{ l += r }
			| MINUS r:prod			{ l -= r }
			)*						{ $$ = l }

prod	=	l:neg
			( MULTI		r:neg		{ l *= r }
			| DIVIDE	r:neg		{ l /= r }
			| MODULO	r:neg		{ l %= r }
			)*						{ $$ = l }

neg		=	MINUS n:neg				{ $$ = -n }
			| n:value				{ $$ = n }

value	=	n:NUMBER				{ $$ = n }
			| l:LETTER				{ $$ = var[l - 'a'] }

-		=	[ \t]*
NUMBER	=	< [0-9]+ >	-			{ $$ = atoi(yytext) }
PLUS	=	'+'			-
MINUS	=	'-'			-
MULTI	=	'*'			-
DIVIDE	=	'/'			-
MODULO	=	'%'			-
LETTER	=	(< [a-z] >				{ $$ = yytext[0] }
			|< [A-Z] >				{ $$ = yytext[0] + 'a' - 'A' }
			)			-
EQUAL	=	'='			-

%%

int main(int argc, char **argv)
{
	while (yyparse()) {
		printf("%d\n", yylval);
	}
	/*
	for (int i = 0; i < 26; i++) {
		printf("var[%d]=%d ", i, var[i]);
	}
	*/

	return 0;
}
